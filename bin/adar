#!/usr/bin/perl
#
use strict;
use warnings;
use Carp;
use Config::IniFiles;
use Data::Dumper;
use Data::HexDump;
use Fcntl qw( :DEFAULT :seek );
use lib qw(/home/jfenal/dev/adar/bin);
use adar;

=pod

=head2 DB descriptor from DDM

    %dbdesc = {
        ddm => 'dummy.ddm',
        files => {
            'FILE1' => { fdt => 'dummy1.fdt', bin_file => 'dummy1.bin' },
            'FILE2' => { fdt => 'dummy2.fdt', bin_file => 'dummy2.bin' },
        },
        fields => {
            count => 123,
            1 => { name => AA, 'type' => 'S', comment => '...', },
            2 => { name => AB, 'type' => 'K', comment => '...', },
        },
    };

=cut

our $DEBUG = 1;
=pod
sub bin_dump {
    my $dbdesc = shift @_;

    my @files = keys %{ $dbdesc->{files} };

    foreach my $file ( @files ) {
        my $filename = $dbdesc->{files}->{$file}->{bin_file};
        my $pnt = $dbdesc->{files}->{$file}->{pnt};
        my $fh = bin_open($filename);

        # Get field pointer from dbdesc
        my $field = $dbdesc->{ddm_fields};
        # Get field list
        my @fields = map { $field->{$_}->{name} } grep m{ \A \d+ \z}imxs, keys %{ $field };
        print "Fields :", Dumper \@fields;
        foreach my $f (@fields) {
            print "$f : type=$field->{$_}->{type}\n";
        }
        my $nr = 0;
        while( ! eof($fh) ) {
            if (defined $pnt->[$nr]) {
                my $len;
                if (defined $pnt->[$nr + 1]) {
                    $len = $pnt->[$nr + 1] - $pnt->[$nr] + 31;
                }
                else {
                    $len = 350;
                }
                print "Supposed length of reg : " . ( $pnt->[$nr + 1] - $pnt->[$nr]) . "\n";

                print '-' x 60 . "\n";
                seek $fh, $pnt->[$nr], SEEK_SET;
                my $buf;
                read $fh, $buf, $len;
                print HexDump $buf;

                seek $fh, $pnt->[$nr], SEEK_SET;
                print
                    read_u16le($fh),   " ",

                    read_u32le($fh),   " ",
                    read_u16le($fh),   " ",

                    read_u16le($fh),   " ",
                    read_u16le($fh),   " ",
                    read_zstring($fh),   " ",
                    "\n"; $len -= 12;

            }
            else {
                # print "record $nr seems to be deleted (not offset in pnt)\n";
                ;
            }

            $nr++;
        }
    }
}
=cut
my $f = shift @ARGV;

# First, open .ddm file
my $dbdesc = ddm_read($f);

ddm_dump($dbdesc);
fdt_dump($dbdesc);
pnt_load($dbdesc);
pnt_dump($dbdesc);
#bin_dump($dbdesc);

